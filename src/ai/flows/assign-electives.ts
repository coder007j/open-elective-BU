// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow for automatically assigning students to electives based on their preferences and available slots.
 *
 * - assignElectives - A function that takes student preferences and assigns them to electives.
 * - AssignElectivesInput - The input type for the assignElectives function.
 * - AssignElectivesOutput - The return type for the assignElectives function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';


const StudentSchema = z.object({
  rollNumber: z.string().describe('The unique roll number of the student.'),
  preferences: z.array(z.string()).describe('An array of department names representing the student\'s elective preferences, in order of priority.'),
});

const DepartmentSchema = z.object({
  name: z.string().describe('The name of the department offering the elective.'),
  capacity: z.number().int().positive().describe('The maximum number of students that can be assigned to this elective.'),
  assignedStudents: z.array(z.string()).describe('The roll numbers of students already assigned to this department.'),
});

const AssignElectivesInputSchema = z.object({
  students: z.array(StudentSchema).describe('An array of student objects, each containing their roll number and elective preferences.'),
  departments: z.array(DepartmentSchema).describe('An array of department objects, each containing its name, capacity, and assigned students.'),
});

export type AssignElectivesInput = z.infer<typeof AssignElectivesInputSchema>;

const AssignmentResultSchema = z.object({
  rollNumber: z.string().describe('The roll number of the student.'),
  assignedDepartment: z.string().optional().describe('The name of the department the student has been assigned to. If null, the student could not be assigned to any of their preferred electives.'),
  reason: z.string().optional().describe('The reason for the assignment or lack thereof.'),
});

const AssignElectivesOutputSchema = z.object({
  assignments: z.array(AssignmentResultSchema).describe('An array of assignment result objects, indicating the department assigned to each student.'),
});

export type AssignElectivesOutput = z.infer<typeof AssignElectivesOutputSchema>;

export async function assignElectives(input: AssignElectivesInput): Promise<AssignElectivesOutput> {
  return assignElectivesFlow(input);
}

const assignElectivesPrompt = ai.definePrompt({
  name: 'assignElectivesPrompt',
  input: {schema: AssignElectivesInputSchema},
  output: {schema: AssignElectivesOutputSchema},
  prompt: `You are an AI assistant that helps assign students to elective departments based on their preferences and department capacity.

  Given the following list of students and their elective preferences, and the list of departments with their current assignments and capacities, determine the optimal elective assignments for each student.

  Students:
  {{#each students}}
  - Roll Number: {{this.rollNumber}}, Preferences: {{this.preferences}}
  {{/each}}

  Departments:
  {{#each departments}}
  - Name: {{this.name}}, Capacity: {{this.capacity}}, Assigned Students: {{this.assignedStudents}}
  {{/each}}

  Consider student preferences and department capacities to maximize student satisfaction while respecting department constraints. If a student's preferred department is full, assign them to their next available preference, explaining the reason in the "reason" field.

  Return a JSON object containing an array of assignment results for each student, including roll number and assigned department.
  `,
});

const assignElectivesFlow = ai.defineFlow(
  {
    name: 'assignElectivesFlow',
    inputSchema: AssignElectivesInputSchema,
    outputSchema: AssignElectivesOutputSchema,
  },
  async input => {
    const {output} = await assignElectivesPrompt(input);
    return output!;
  }
);

